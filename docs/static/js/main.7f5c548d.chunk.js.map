{"version":3,"sources":["utils.ts","Game/Cell.tsx","Game/Grid.tsx","Game/Game.tsx","App.tsx","index.tsx"],"names":["parseCoord","coord","coordArray","split","x","parseInt","y","getStartEnd","numA","numB","Math","min","max","calculateValidLine","start","end","startCoord","endCoord","yDiff","xDiff","line","isValidHorizontalLine","coords","startX","endX","push","calculateHorizontalLine","isValidVerticalLine","startY","endY","calculateVerticalLine","abs","isValidDiagonalLine","len","xGrows","yGrows","i","calculateDiagonalLine","length","reverse","Root","styled","div","props","highlighted","selected","getCoordFromDataset","element","dataset","Cell","children","onMouseDown","onMouseMove","onMouseUp","handleMouseDownOrTouchStart","event","target","handleMouseUpOrTouchEnd","data-coord","onTouchStart","onTouchMove","changedTouch","changedTouches","document","elementFromPoint","clientX","clientY","onTouchEnd","React","memo","columns","Grid","grid","highlightedCells","onWordSelected","useState","isMouseDown","setIsMouseDown","setStartCoord","Set","selectedCells","setSelectedCells","prevCoord","useRef","useEffect","addEventListener","preventScreenScroll","preventDefault","passive","removeEventListener","handleMouseDown","useCallback","handleMouseMove","current","handleMouseUp","Array","from","data-testid","map","arr","letter","has","Paragraph","p","Spacer","Game","game","onGameFinished","foundCoords","setFoundCoords","wordLocations","foundWordsCount","reset","Object","keys","word_locations","word","source_language","target_language","character_grid","includes","join","Title","h1","Message","h2","App","games","gameIndex","setGameIndex","currentGame","aria-label","role","inputs","require","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7f5c548d.chunk.js","sourcesContent":["import { Coordinate } from \"./types\";\n\nconst parseCoord = (coord: string): Coordinate => {\n  const coordArray = coord.split(\",\");\n  return {\n    x: parseInt(coordArray[0], 10),\n    y: parseInt(coordArray[1], 10),\n  };\n};\n\nconst isValidHorizontalLine = (xDiff: number, yDiff: number) => !yDiff && xDiff;\nconst isValidVerticalLine = (xDiff: number, yDiff: number) => !xDiff && yDiff;\nconst isValidDiagonalLine = (xDiff: number, yDiff: number) =>\n  Math.abs(yDiff) === Math.abs(xDiff);\n\nconst getStartEnd = (numA: number, numB: number) => {\n  return [Math.min(numA, numB), Math.max(numA, numB)];\n};\n\nconst calculateHorizontalLine = (\n  startCoord: Coordinate,\n  endCoord: Coordinate\n): string[] => {\n  const coords = [];\n  const [startX, endX] = getStartEnd(startCoord.x, endCoord.x);\n  for (let x = startX; x <= endX; x++) {\n    coords.push(`${x},${startCoord.y}`);\n  }\n  return coords;\n};\n\nconst calculateVerticalLine = (\n  startCoord: Coordinate,\n  endCoord: Coordinate\n): string[] => {\n  const coords = [];\n  const [startY, endY] = getStartEnd(startCoord.y, endCoord.y);\n  for (let y = startY; y <= endY; y++) {\n    coords.push(`${startCoord.x},${y}`);\n  }\n  return coords;\n};\n\nconst calculateDiagonalLine = (\n  startCoord: Coordinate,\n  endCoord: Coordinate\n): string[] => {\n  const coords = [];\n  const len = Math.abs(startCoord.x - endCoord.x);\n  const xGrows = startCoord.x < endCoord.x;\n  const yGrows = startCoord.y < endCoord.y;\n\n  for (let i = 0; i <= len; i++) {\n    const x = xGrows ? startCoord.x + i : startCoord.x - i;\n    const y = yGrows ? startCoord.y + i : startCoord.y - i;\n    coords.push(`${x},${y}`);\n  }\n  return coords;\n};\n\nexport const calculateValidLine = (start: string, end: string): string[] => {\n  const startCoord = parseCoord(start);\n  const endCoord = parseCoord(end);\n\n  const yDiff = startCoord.y - endCoord.y;\n  const xDiff = startCoord.x - endCoord.x;\n\n  let line: string[] = [];\n\n  if (isValidHorizontalLine(xDiff, yDiff)) {\n    line = calculateHorizontalLine(startCoord, endCoord);\n  }\n\n  if (isValidVerticalLine(xDiff, yDiff)) {\n    line = calculateVerticalLine(startCoord, endCoord);\n  }\n\n  if (isValidDiagonalLine(xDiff, yDiff)) {\n    line = calculateDiagonalLine(startCoord, endCoord);\n  }\n\n  if (!line.length) {\n    return line;\n  }\n\n  return start !== line[0] ? line.reverse() : line;\n};\n","import React, { ReactNode } from \"react\";\nimport styled from \"styled-components\";\n\ninterface StyledCellProps {\n  highlighted: boolean;\n  selected: boolean;\n}\n\nexport const HOVER_COLOR = \"lemonchiffon\";\nexport const HIGHLIGHTED_COLOR = \"#ffef00\";\n\nconst Root = styled.div<StyledCellProps>`\n  text-align: center;\n  padding: 8px;\n  font-size: 24px;\n  font-weight: bold;\n  border-bottom: 1px solid black;\n  border-right: 1px solid black;\n  user-select: none;\n  cursor: pointer;\n  background-color: ${(props) =>\n    props.highlighted || props.selected ? HIGHLIGHTED_COLOR : \"white\"};\n\n  @media (min-width: 768px) {\n    ${(props) =>\n      !props.selected &&\n      !props.highlighted &&\n      `\n      &:hover {\n        background-color: ${HOVER_COLOR};\n      }\n    `}\n  }\n\n  @media (max-width: 480px) {\n    padding: 4px 8px;\n    font-size: 18px;\n  }\n`;\n\nexport interface CellProps {\n  children: ReactNode;\n  coord: string;\n  highlighted?: boolean;\n  selected?: boolean;\n  onMouseDown?: (coord: string) => void;\n  onMouseMove?: (coord: string) => void;\n  onMouseUp?: () => void;\n}\n\nconst getCoordFromDataset = (element: HTMLElement): string => {\n  return element.dataset[\"coord\"] || \"\";\n};\n\nconst Cell = ({\n  children,\n  coord,\n  highlighted = false,\n  selected = false,\n  onMouseDown = () => {},\n  onMouseMove = () => {},\n  onMouseUp = () => {},\n}: CellProps) => {\n  const handleMouseDownOrTouchStart = (\n    event: React.MouseEvent | React.TouchEvent\n  ) => {\n    onMouseDown(getCoordFromDataset(event.target as HTMLElement));\n  };\n\n  const handleMouseMove = (event: React.MouseEvent) => {\n    onMouseMove(getCoordFromDataset(event.target as HTMLElement));\n  };\n\n  const handleTouchMove = (event: React.TouchEvent) => {\n    const changedTouch = event.changedTouches[0];\n    const element = document.elementFromPoint(\n      changedTouch.clientX,\n      changedTouch.clientY\n    );\n    onMouseMove(getCoordFromDataset(element as HTMLElement));\n  };\n\n  const handleMouseUpOrTouchEnd = () => {\n    onMouseUp();\n  };\n\n  return (\n    <Root\n      data-coord={coord}\n      highlighted={highlighted}\n      selected={selected}\n      onMouseDown={handleMouseDownOrTouchStart}\n      onMouseMove={handleMouseMove}\n      onMouseUp={handleMouseUpOrTouchEnd}\n      onTouchStart={handleMouseDownOrTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleMouseUpOrTouchEnd}\n    >\n      {children}\n    </Root>\n  );\n};\n\nexport default React.memo(Cell);\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { CharacterGrid } from \"../types\";\nimport { calculateValidLine } from \"../utils\";\n\nimport Cell from \"./Cell\";\n\ninterface StyledGridProps {\n  columns?: number;\n}\n\nconst Root = styled.div<StyledGridProps>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => props.columns || 1}, 50px);\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n\n  @media (max-width: 480px) {\n    grid-template-columns: repeat(${(props) => props.columns || 1}, 32px);\n  }\n`;\n\nexport interface GridProps {\n  grid: CharacterGrid;\n  highlightedCells: Set<string>;\n  onWordSelected?: (coords: string[]) => void;\n}\n\nconst Grid = ({\n  grid,\n  highlightedCells,\n  onWordSelected = () => {},\n}: GridProps) => {\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [startCoord, setStartCoord] = useState(\"\");\n  const [selectedCells, setSelectedCells] = useState(new Set<string>());\n  const prevCoord = useRef(\"\");\n\n  useEffect(() => {\n    const handleMouseUpOrTouchEnd = () => {\n      setIsMouseDown(false);\n    };\n    // quit \"selection mode\" when mouse up/touch end happens outside of the grid\n    document.addEventListener(\"mouseup\", handleMouseUpOrTouchEnd);\n    document.addEventListener(\"touchend\", handleMouseUpOrTouchEnd);\n\n    const preventScreenScroll = (event: TouchEvent) => {\n      event.preventDefault();\n    };\n    // prevent screen from scrolling when touch-dragging over it\n    document.addEventListener(\"touchmove\", preventScreenScroll, {\n      passive: false,\n    });\n    return () => {\n      document.removeEventListener(\"mouseup\", handleMouseUpOrTouchEnd);\n      document.removeEventListener(\"touchend\", handleMouseUpOrTouchEnd);\n      document.removeEventListener(\"touchmove\", preventScreenScroll);\n    };\n  }, []);\n\n  useEffect(() => {\n    setSelectedCells(new Set<string>());\n  }, [grid]);\n\n  const handleMouseDown = useCallback((coord: string) => {\n    setIsMouseDown(true);\n    setStartCoord(coord);\n  }, []);\n\n  const handleMouseMove = (coord: string) => {\n    if (isMouseDown) {\n      // since mouse move happens many times for the same cell, instead of\n      // throttling the event handler we use a ref for the previous coord to\n      // prevent calculating the same line multiple times\n      if (startCoord !== coord && coord !== prevCoord.current) {\n        const line = calculateValidLine(startCoord, coord);\n        setSelectedCells(new Set(line));\n        prevCoord.current = coord;\n      }\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsMouseDown(false);\n\n    // onWordSelected callback checks if the selected line is a valid word\n    onWordSelected(Array.from(selectedCells));\n    setSelectedCells(new Set<string>());\n  };\n\n  return (\n    <Root columns={grid.length} data-testid=\"grid\">\n      {grid.map((arr: string[], y: number) =>\n        arr.map((letter: string, x: number) => {\n          const coord = `${x},${y}`;\n          return (\n            <Cell\n              key={coord}\n              coord={coord}\n              highlighted={highlightedCells.has(coord)}\n              selected={selectedCells.has(coord)}\n              onMouseDown={handleMouseDown}\n              onMouseMove={handleMouseMove}\n              onMouseUp={handleMouseUp}\n            >\n              {letter}\n            </Cell>\n          );\n        })\n      )}\n    </Root>\n  );\n};\n\nexport default Grid;\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { InputType } from \"../types\";\nimport Grid from \"./Grid\";\n\nconst Paragraph = styled.p`\n  font-size: 20px;\n  margin: 5px 0;\n  text-align: center;\n\n  @media (max-width: 480px) {\n    font-size: 18px;\n  }\n`;\n\nconst Spacer = styled.div`\n  margin-bottom: 20px;\n`;\n\nexport interface GameProps {\n  game: InputType;\n  onGameFinished?: () => void;\n}\n\nconst Game = ({ game, onGameFinished = () => {} }: GameProps) => {\n  const [foundCoords, setFoundCoords] = useState(new Set<string>());\n  const wordLocations = useRef([] as string[]);\n  const foundWordsCount = useRef(0);\n\n  const reset = useCallback(() => {\n    setFoundCoords(new Set<string>());\n    wordLocations.current = Object.keys(game.word_locations);\n    foundWordsCount.current = 0;\n  }, [game]);\n\n  useEffect(() => {\n    if (game) {\n      reset();\n    }\n  }, [game, reset]);\n\n  const handleWordSelected = (coords: string[]): void => {\n    if (wordLocations.current.includes(coords.join(\",\"))) {\n      foundWordsCount.current += 1;\n\n      if (foundWordsCount.current === wordLocations.current.length) {\n        onGameFinished();\n      } else {\n        setFoundCoords(new Set([...Array.from(foundCoords), ...coords]));\n      }\n    }\n  };\n\n  return (\n    <>\n      <Spacer>\n        <Paragraph>\n          Search word: <strong>{game.word}</strong>\n        </Paragraph>\n        <Paragraph>\n          Source language: <strong>{game.source_language}</strong>\n        </Paragraph>\n        <Paragraph>\n          Target language: <strong>{game.target_language}</strong>\n        </Paragraph>\n        <Paragraph>\n          Words to find:{\" \"}\n          <strong>\n            {foundWordsCount.current}/{wordLocations.current.length}\n          </strong>\n        </Paragraph>\n      </Spacer>\n      <Grid\n        grid={game.character_grid}\n        highlightedCells={foundCoords}\n        onWordSelected={handleWordSelected}\n      />\n    </>\n  );\n};\n\nexport default Game;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { InputType } from \"./types\";\nimport Game from \"./Game\";\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n`;\n\nconst Title = styled.h1`\n  font-family: \"Unica One\", cursive;\n  font-size: 40px;\n\n  span {\n    font-size: 34px;\n  }\n\n  @media (max-width: 480px) {\n    font-size: 30px;\n\n    span {\n      font-size: 24px;\n    }\n  }\n`;\n\nconst Message = styled.h2`\n  @media (max-width: 480px) {\n    font-size: 20px;\n  }\n`;\n\nexport interface AppProps {\n  games?: InputType[];\n}\n\nfunction App({ games = [] }: AppProps) {\n  const [gameIndex, setGameIndex] = useState(0);\n\n  const handleGameFinished = () => {\n    setGameIndex(gameIndex + 1);\n  };\n\n  const currentGame = games[gameIndex];\n\n  return (\n    <Root>\n      <Title>\n        Word Search{\" \"}\n        <span aria-label=\"Magnifying glass\" role=\"img\">\n          🔍\n        </span>\n      </Title>\n      {currentGame ? (\n        <Game game={currentGame} onGameFinished={handleGameFinished} />\n      ) : (\n        <Message>There are no more games!</Message>\n      )}\n    </Root>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { InputType } from \"./types\";\nimport App from \"./App\";\n\nconst inputs: InputType[] = require(\"./inputs.json\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App games={inputs} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}